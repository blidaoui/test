"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@semantic-ui-react";
exports.ids = ["vendor-chunks/@semantic-ui-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/@semantic-ui-react/event-stack/lib/cjs/event-stack.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@semantic-ui-react/event-stack/lib/cjs/event-stack.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar env = __webpack_require__(/*! exenv */ \"(ssr)/./node_modules/exenv/index.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\n/**\n * The current implementation was chosen by performance and compatibility reasons, feel free to play\n * with benchmarks and submit PR with faster alternative. Each method contains links to benchmarks.\n */\nvar EventSet =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @see https://jsperf.com/suir-eventset-constructor\n   */\n  function EventSet(eventHandlers) {\n    _classCallCheck(this, EventSet);\n\n    _defineProperty(this, \"handlers\", void 0);\n\n    this.handlers = eventHandlers.slice(0);\n  }\n  /**\n   * @see https://jsperf.com/suir-eventset-addhandlers\n   */\n\n\n  _createClass(EventSet, [{\n    key: \"addHandlers\",\n    value: function addHandlers(additionalHandlers) {\n      var newHandlers = this.handlers.slice(0);\n      var length = additionalHandlers.length; // Heads up!\n      // Previously we use Set there, it granted uniqueness of handlers, now dispatchEvent() is\n      // responsible for this.\n\n      for (var i = 0; i < length; i += 1) {\n        newHandlers.push(additionalHandlers[i]);\n      }\n\n      return new EventSet(newHandlers);\n    }\n    /**\n     * @see https://jsperf.com/suir-eventset-dispatchsingle\n     * @see https://jsperf.com/suir-eventset-dispatchmultiple2\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event, dispatchAll) {\n      var count = this.handlers.length - 1;\n\n      if (!dispatchAll) {\n        // Heads up!\n        // We don't use .pop() there because it will mutate the array.\n        var recentHandler = this.handlers[count];\n        recentHandler(event);\n        return;\n      }\n\n      for (var i = count; i >= 0; i -= 1) {\n        if (!this.handlers[i].called) {\n          this.handlers[i].called = true;\n          this.handlers[i](event);\n        }\n      }\n\n      for (var _i = count; _i >= 0; _i -= 1) {\n        this.handlers[_i].called = false;\n      }\n    }\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers() {\n      return this.handlers.length > 0;\n    }\n    /**\n     * @see https://jsperf.com/suir-eventset-removehandlers\n     */\n\n  }, {\n    key: \"removeHandlers\",\n    value: function removeHandlers(removalHandlers) {\n      var newHandlers = [];\n      var length = this.handlers.length;\n\n      for (var i = 0; i < length; i += 1) {\n        var handler = this.handlers[i];\n\n        if (removalHandlers.indexOf(handler) === -1) {\n          newHandlers.push(handler);\n        }\n      }\n\n      return new EventSet(newHandlers);\n    }\n  }]);\n\n  return EventSet;\n}();\n\n/**\n * An IE11-compatible function.\n *\n * @see https://jsperf.com/suir-clone-map\n */\nfunction cloneMap(map) {\n  var newMap = new Map();\n  map.forEach(function (value, key) {\n    newMap.set(key, value);\n  });\n  return newMap;\n}\nfunction normalizeHandlers(handlers) {\n  return Array.isArray(handlers) ? handlers : [handlers];\n}\n/**\n * Asserts that the passed value is React.RefObject\n *\n * @see https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n */\n\nvar isRefObject = function isRefObject(ref // eslint-disable-next-line\n) {\n  return ref !== null && _typeof(ref) === 'object' && ref.hasOwnProperty('current');\n};\n/**\n * Normalizes `target` for EventStack, because `target` can be passed as `boolean` or `string`.\n *\n * @see https://jsperf.com/suir-normalize-target\n */\n\nfunction normalizeTarget(target) {\n  if (target === 'document') return document;\n  if (target === 'window') return window;\n  if (isRefObject(target)) return target.current || document;\n  return target || document;\n}\n\nvar EventPool =\n/*#__PURE__*/\nfunction () {\n  function EventPool(poolName, handlerSets) {\n    _classCallCheck(this, EventPool);\n\n    _defineProperty(this, \"handlerSets\", void 0);\n\n    _defineProperty(this, \"poolName\", void 0);\n\n    this.handlerSets = handlerSets;\n    this.poolName = poolName;\n  }\n\n  _createClass(EventPool, [{\n    key: \"addHandlers\",\n    value: function addHandlers(eventType, eventHandlers) {\n      var handlerSets = cloneMap(this.handlerSets);\n\n      if (handlerSets.has(eventType)) {\n        var eventSet = handlerSets.get(eventType);\n        handlerSets.set(eventType, eventSet.addHandlers(eventHandlers));\n      } else {\n        handlerSets.set(eventType, new EventSet(eventHandlers));\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventType, event) {\n      var handlerSet = this.handlerSets.get(eventType);\n      var shouldDispatchAll = this.poolName === 'default';\n\n      if (handlerSet) {\n        handlerSet.dispatchEvent(event, shouldDispatchAll);\n      }\n    }\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers(eventType) {\n      if (!eventType) {\n        return this.handlerSets.size > 0;\n      }\n\n      var eventSet = this.handlerSets.get(eventType);\n\n      if (eventSet) {\n        return eventSet.hasHandlers();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeHandlers\",\n    value: function removeHandlers(eventType, eventHandlers) {\n      var handlerSets = cloneMap(this.handlerSets);\n\n      if (!handlerSets.has(eventType)) {\n        return new EventPool(this.poolName, handlerSets);\n      }\n\n      var currentSet = handlerSets.get(eventType);\n      var nextSet = currentSet.removeHandlers(eventHandlers);\n\n      if (nextSet.hasHandlers()) {\n        handlerSets.set(eventType, nextSet);\n      } else {\n        handlerSets.delete(eventType);\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n  }]);\n\n  return EventPool;\n}();\n\n_defineProperty(EventPool, \"createByType\", function (poolName, eventType, eventHandlers) {\n  var handlerSets = new Map();\n  handlerSets.set(eventType, new EventSet(eventHandlers));\n  return new EventPool(poolName, handlerSets);\n});\n\nvar EventTarget =\n/*#__PURE__*/\nfunction () {\n  function EventTarget(target) {\n    var _this = this;\n\n    _classCallCheck(this, EventTarget);\n\n    _defineProperty(this, \"handlers\", new Map());\n\n    _defineProperty(this, \"pools\", new Map());\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"createEmitter\", function (eventType) {\n      return function (event) {\n        _this.pools.forEach(function (pool) {\n          pool.dispatchEvent(eventType, event);\n        });\n      };\n    });\n\n    this.target = target;\n  }\n\n  _createClass(EventTarget, [{\n    key: \"addHandlers\",\n    value: function addHandlers(poolName, eventType, eventHandlers) {\n      if (this.pools.has(poolName)) {\n        var eventPool = this.pools.get(poolName);\n        this.pools.set(poolName, eventPool.addHandlers(eventType, eventHandlers));\n      } else {\n        this.pools.set(poolName, EventPool.createByType(poolName, eventType, eventHandlers));\n      }\n\n      if (!this.handlers.has(eventType)) {\n        this.addTargetHandler(eventType);\n      }\n    }\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers() {\n      return this.handlers.size > 0;\n    }\n  }, {\n    key: \"removeHandlers\",\n    value: function removeHandlers(poolName, eventType, eventHandlers) {\n      if (!this.pools.has(poolName)) {\n        return;\n      }\n\n      var pool = this.pools.get(poolName);\n      var newPool = pool.removeHandlers(eventType, eventHandlers);\n\n      if (newPool.hasHandlers()) {\n        this.pools.set(poolName, newPool);\n      } else {\n        this.pools.delete(poolName);\n      }\n\n      var hasHandlers = false;\n      this.pools.forEach(function (pool) {\n        return hasHandlers = hasHandlers || pool.hasHandlers(eventType);\n      });\n\n      if (!hasHandlers) {\n        this.removeTargetHandler(eventType);\n      }\n    }\n  }, {\n    key: \"addTargetHandler\",\n    value: function addTargetHandler(eventType) {\n      var handler = this.createEmitter(eventType);\n      this.handlers.set(eventType, handler);\n      this.target.addEventListener(eventType, handler, true);\n    }\n  }, {\n    key: \"removeTargetHandler\",\n    value: function removeTargetHandler(eventType) {\n      if (this.handlers.has(eventType)) {\n        this.target.removeEventListener(eventType, this.handlers.get(eventType), true);\n        this.handlers.delete(eventType);\n      }\n    }\n  }]);\n\n  return EventTarget;\n}();\n\nvar EventStack =\n/*#__PURE__*/\nfunction () {\n  function EventStack() {\n    var _this = this;\n\n    _classCallCheck(this, EventStack);\n\n    _defineProperty(this, \"targets\", new Map());\n\n    _defineProperty(this, \"getTarget\", function (target) {\n      var autoCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var normalized = normalizeTarget(target);\n\n      if (_this.targets.has(normalized)) {\n        return _this.targets.get(normalized);\n      }\n\n      if (!autoCreate) return null;\n      var eventTarget = new EventTarget(normalized);\n\n      _this.targets.set(normalized, eventTarget);\n\n      return eventTarget;\n    });\n\n    _defineProperty(this, \"removeTarget\", function (target) {\n      _this.targets.delete(normalizeTarget(target));\n    });\n  }\n\n  _createClass(EventStack, [{\n    key: \"sub\",\n    value: function sub(eventName, eventHandlers) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!env.canUseDOM) return;\n      var _options$target = options.target,\n          target = _options$target === void 0 ? document : _options$target,\n          _options$pool = options.pool,\n          pool = _options$pool === void 0 ? 'default' : _options$pool;\n      var eventTarget = this.getTarget(target);\n      eventTarget.addHandlers(pool, eventName, normalizeHandlers(eventHandlers));\n    }\n  }, {\n    key: \"unsub\",\n    value: function unsub(eventName, eventHandlers) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!env.canUseDOM) return;\n      var _options$target2 = options.target,\n          target = _options$target2 === void 0 ? document : _options$target2,\n          _options$pool2 = options.pool,\n          pool = _options$pool2 === void 0 ? 'default' : _options$pool2;\n      var eventTarget = this.getTarget(target, false);\n\n      if (eventTarget) {\n        eventTarget.removeHandlers(pool, eventName, normalizeHandlers(eventHandlers));\n        if (!eventTarget.hasHandlers()) this.removeTarget(target);\n      }\n    }\n  }]);\n\n  return EventStack;\n}();\n\nvar instance = new EventStack();\n\n/**\n * This component exposes the EventStack API as public and provides a declarative way to manage it.\n */\nvar EventStack$1 =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EventStack, _React$PureComponent);\n\n  function EventStack() {\n    _classCallCheck(this, EventStack);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EventStack).apply(this, arguments));\n  }\n\n  _createClass(EventStack, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.unsubscribe(prevProps);\n      this.subscribe(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe(this.props);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(props) {\n      var name = props.name,\n          on = props.on,\n          pool = props.pool,\n          target = props.target;\n      instance.sub(name, on, {\n        pool: pool,\n        target: target\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(props) {\n      var name = props.name,\n          on = props.on,\n          pool = props.pool,\n          target = props.target;\n      instance.unsub(name, on, {\n        pool: pool,\n        target: target\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return EventStack;\n}(React.PureComponent);\n\n_defineProperty(EventStack$1, \"defaultProps\", {\n  pool: 'default',\n  target: 'document'\n});\nEventStack$1.propTypes = {\n  /** An event name on which we will subscribe. */\n  name: PropTypes.string.isRequired,\n\n  /** An event handler or array of event handlers. */\n  on: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]).isRequired,\n\n  /** A name of pool. */\n  pool: PropTypes.string,\n\n  /** A DOM element on which we will subscribe. */\n  target: PropTypes.oneOfType([PropTypes.oneOf(['document', 'window']), // Heads up!\n  // This condition for SSR safety.\n  PropTypes.instanceOf(env.canUseDOM ? HTMLElement : Object), PropTypes.shape({\n    current: PropTypes.object\n  })])\n};\n\nexports.instance = instance;\nexports[\"default\"] = EventStack$1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@semantic-ui-react/event-stack/lib/cjs/event-stack.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@semantic-ui-react/event-stack/lib/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@semantic-ui-react/event-stack/lib/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nvar stack;\n\nif (false) {} else {\n  stack = __webpack_require__(/*! ./cjs/event-stack.development.js */ \"(ssr)/./node_modules/@semantic-ui-react/event-stack/lib/cjs/event-stack.development.js\");\n}\n\nmodule.exports = stack.default;\nmodule.exports.instance = stack.instance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbWFudGljLXVpLXJlYWN0L2V2ZW50LXN0YWNrL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ2E7O0FBRWI7O0FBRUEsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixVQUFVLG1CQUFPLENBQUMsZ0lBQWtDO0FBQ3BEOztBQUVBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdGF1cmFudC8uL25vZGVfbW9kdWxlcy9Ac2VtYW50aWMtdWktcmVhY3QvZXZlbnQtc3RhY2svbGliL2luZGV4LmpzP2U4MjEiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdGFjaztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgc3RhY2sgPSByZXF1aXJlKCcuL2Nqcy9ldmVudC1zdGFjay5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBzdGFjayA9IHJlcXVpcmUoJy4vY2pzL2V2ZW50LXN0YWNrLmRldmVsb3BtZW50LmpzJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2suZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmluc3RhbmNlID0gc3RhY2suaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@semantic-ui-react/event-stack/lib/index.js\n");

/***/ })

};
;