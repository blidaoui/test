/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-dropzone";
exports.ids = ["vendor-chunks/react-dropzone"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-dropzone/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/react-dropzone/dist/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("!function(e,t){ true?t(exports,__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"),__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\")):0}(this,(function(e,t,n){\"use strict\";function r(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var o=r(t),i=r(n);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null==n)return;var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}(e,t)||p(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}\n/*! *****************************************************************************\n  Copyright (c) Microsoft Corporation.\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** */()}function s(e){return function(e){if(Array.isArray(e))return d(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e[\"@@iterator\"])return Array.from(e)}(e)||p(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function p(e,t){if(e){if(\"string\"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))}function g(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function m(e,t){var n=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}var y=new Map([[\"aac\",\"audio/aac\"],[\"abw\",\"application/x-abiword\"],[\"arc\",\"application/x-freearc\"],[\"avif\",\"image/avif\"],[\"avi\",\"video/x-msvideo\"],[\"azw\",\"application/vnd.amazon.ebook\"],[\"bin\",\"application/octet-stream\"],[\"bmp\",\"image/bmp\"],[\"bz\",\"application/x-bzip\"],[\"bz2\",\"application/x-bzip2\"],[\"cda\",\"application/x-cdf\"],[\"csh\",\"application/x-csh\"],[\"css\",\"text/css\"],[\"csv\",\"text/csv\"],[\"doc\",\"application/msword\"],[\"docx\",\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"],[\"eot\",\"application/vnd.ms-fontobject\"],[\"epub\",\"application/epub+zip\"],[\"gz\",\"application/gzip\"],[\"gif\",\"image/gif\"],[\"heic\",\"image/heic\"],[\"heif\",\"image/heif\"],[\"htm\",\"text/html\"],[\"html\",\"text/html\"],[\"ico\",\"image/vnd.microsoft.icon\"],[\"ics\",\"text/calendar\"],[\"jar\",\"application/java-archive\"],[\"jpeg\",\"image/jpeg\"],[\"jpg\",\"image/jpeg\"],[\"js\",\"text/javascript\"],[\"json\",\"application/json\"],[\"jsonld\",\"application/ld+json\"],[\"mid\",\"audio/midi\"],[\"midi\",\"audio/midi\"],[\"mjs\",\"text/javascript\"],[\"mp3\",\"audio/mpeg\"],[\"mp4\",\"video/mp4\"],[\"mpeg\",\"video/mpeg\"],[\"mpkg\",\"application/vnd.apple.installer+xml\"],[\"odp\",\"application/vnd.oasis.opendocument.presentation\"],[\"ods\",\"application/vnd.oasis.opendocument.spreadsheet\"],[\"odt\",\"application/vnd.oasis.opendocument.text\"],[\"oga\",\"audio/ogg\"],[\"ogv\",\"video/ogg\"],[\"ogx\",\"application/ogg\"],[\"opus\",\"audio/opus\"],[\"otf\",\"font/otf\"],[\"png\",\"image/png\"],[\"pdf\",\"application/pdf\"],[\"php\",\"application/x-httpd-php\"],[\"ppt\",\"application/vnd.ms-powerpoint\"],[\"pptx\",\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"],[\"rar\",\"application/vnd.rar\"],[\"rtf\",\"application/rtf\"],[\"sh\",\"application/x-sh\"],[\"svg\",\"image/svg+xml\"],[\"swf\",\"application/x-shockwave-flash\"],[\"tar\",\"application/x-tar\"],[\"tif\",\"image/tiff\"],[\"tiff\",\"image/tiff\"],[\"ts\",\"video/mp2t\"],[\"ttf\",\"font/ttf\"],[\"txt\",\"text/plain\"],[\"vsd\",\"application/vnd.visio\"],[\"wav\",\"audio/wav\"],[\"weba\",\"audio/webm\"],[\"webm\",\"video/webm\"],[\"webp\",\"image/webp\"],[\"woff\",\"font/woff\"],[\"woff2\",\"font/woff2\"],[\"xhtml\",\"application/xhtml+xml\"],[\"xls\",\"application/vnd.ms-excel\"],[\"xlsx\",\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"],[\"xml\",\"application/xml\"],[\"xul\",\"application/vnd.mozilla.xul+xml\"],[\"zip\",\"application/zip\"],[\"7z\",\"application/x-7z-compressed\"],[\"mkv\",\"video/x-matroska\"],[\"mov\",\"video/quicktime\"],[\"msg\",\"application/vnd.ms-outlook\"]]);function b(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(\".\")&&!e.type){var n=t.split(\".\").pop().toLowerCase(),r=y.get(n);r&&Object.defineProperty(e,\"type\",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if(\"string\"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,\"path\",{value:\"string\"==typeof t?t:\"string\"==typeof r&&r.length>0?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var h=[\".DS_Store\",\"Thumbs.db\"];function w(e){return\"object\"==typeof e&&null!==e}function D(e){return j(e.target.files).map((function(e){return b(e)}))}function x(e){return v(this,void 0,void 0,(function(){return g(this,(function(t){switch(t.label){case 0:return[4,Promise.all(e.map((function(e){return e.getFile()})))];case 1:return[2,t.sent().map((function(e){return b(e)}))]}}))}))}function F(e,t){return v(this,void 0,void 0,(function(){var n;return g(this,(function(r){switch(r.label){case 0:return null===e?[2,[]]:e.items?(n=j(e.items).filter((function(e){return\"file\"===e.kind})),\"drop\"!==t?[2,n]:[4,Promise.all(n.map(A))]):[3,2];case 1:return[2,O(k(r.sent()))];case 2:return[2,O(j(e.files).map((function(e){return b(e)})))]}}))}))}function O(e){return e.filter((function(e){return-1===h.indexOf(e.name)}))}function j(e){if(null===e)return[];for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function A(e){if(\"function\"!=typeof e.webkitGetAsEntry)return E(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?C(t):E(e)}function k(e){return e.reduce((function(e,t){return function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}(e,Array.isArray(t)?k(t):[t])}),[])}function E(e){var t=e.getAsFile();if(!t)return Promise.reject(e+\" is not a File\");var n=b(t);return Promise.resolve(n)}function P(e){return v(this,void 0,void 0,(function(){return g(this,(function(t){return[2,e.isDirectory?C(e):S(e)]}))}))}function C(e){var t=e.createReader();return new Promise((function(e,n){var r=[];!function o(){var i=this;t.readEntries((function(t){return v(i,void 0,void 0,(function(){var i,a,u;return g(this,(function(c){switch(c.label){case 0:if(t.length)return[3,5];c.label=1;case 1:return c.trys.push([1,3,,4]),[4,Promise.all(r)];case 2:return i=c.sent(),e(i),[3,4];case 3:return a=c.sent(),n(a),[3,4];case 4:return[3,6];case 5:u=Promise.all(t.map(P)),r.push(u),o(),c.label=6;case 6:return[2]}}))}))}),(function(e){n(e)}))}()}))}function S(e){return v(this,void 0,void 0,(function(){return g(this,(function(t){return[2,new Promise((function(t,n){e.file((function(n){var r=b(n,e.fullPath);t(r)}),(function(e){n(e)}))}))]}))}))}var z=\"file-invalid-type\",R=\"file-too-large\",T=\"file-too-small\",L=\"too-many-files\",I={FileInvalidType:z,FileTooLarge:R,FileTooSmall:T,TooManyFiles:L},M=function(e){e=Array.isArray(e)&&1===e.length?e[0]:e;var t=Array.isArray(e)?\"one of \".concat(e.join(\", \")):e;return{code:z,message:\"File type must be \".concat(t)}},K=function(e){return{code:R,message:\"File is larger than \".concat(e,\" \").concat(1===e?\"byte\":\"bytes\")}},B=function(e){return{code:T,message:\"File is smaller than \".concat(e,\" \").concat(1===e?\"byte\":\"bytes\")}},_={code:L,message:\"Too many files\"};function q(e,t){var n=\"application/x-moz-file\"===e.type||function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(\",\"),r=e.name||\"\",o=(e.type||\"\").toLowerCase(),i=o.replace(/\\/.*$/,\"\");return n.some((function(e){var t=e.trim().toLowerCase();return\".\"===t.charAt(0)?r.toLowerCase().endsWith(t):t.endsWith(\"/*\")?i===t.replace(/\\/.*$/,\"\"):o===t}))}return!0}(e,t);return[n,n?null:M(t)]}function G(e,t,n){if($(e.size))if($(t)&&$(n)){if(e.size>n)return[!1,K(n)];if(e.size<t)return[!1,B(t)]}else{if($(t)&&e.size<t)return[!1,B(t)];if($(n)&&e.size>n)return[!1,K(n)]}return[!0,null]}function $(e){return null!=e}function N(e){var t=e.files,n=e.accept,r=e.minSize,o=e.maxSize,i=e.multiple,a=e.maxFiles;return!(!i&&t.length>1||i&&a>=1&&t.length>a)&&t.every((function(e){var t=f(q(e,n),1)[0],i=f(G(e,r,o),1)[0];return t&&i}))}function U(e){return\"function\"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function W(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,(function(e){return\"Files\"===e||\"application/x-moz-file\"===e})):!!e.target&&!!e.target.files}function H(e){e.preventDefault()}function Y(e){return-1!==e.indexOf(\"MSIE\")||-1!==e.indexOf(\"Trident/\")}function J(e){return-1!==e.indexOf(\"Edge/\")}function Q(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return Y(e)||J(e)}function V(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.some((function(t){return!U(e)&&t&&t.apply(void 0,[e].concat(r)),U(e)}))}}function X(){return\"showOpenFilePicker\"in window}function Z(e){return e=\"string\"==typeof e?e.split(\",\"):e,[{description:\"everything\",accept:Array.isArray(e)?e.filter((function(e){return\"audio/*\"===e||\"video/*\"===e||\"image/*\"===e||\"text/*\"===e||/\\w+\\/[-+.\\w]+/g.test(e)})).reduce((function(e,t){return u(u({},e),{},c({},t,[]))}),{}):{}}]}function ee(e){return e instanceof DOMException&&(\"AbortError\"===e.name||e.code===e.ABORT_ERR)}function te(e){return e instanceof DOMException&&(\"SecurityError\"===e.name||e.code===e.SECURITY_ERR)}var ne=[\"children\"],re=[\"open\"],oe=[\"refKey\",\"role\",\"onKeyDown\",\"onFocus\",\"onBlur\",\"onClick\",\"onDragEnter\",\"onDragOver\",\"onDragLeave\",\"onDrop\"],ie=[\"refKey\",\"onChange\",\"onClick\"],ae=t.forwardRef((function(e,n){var r=e.children,i=le(l(e,ne)),a=i.open,c=l(i,re);return t.useImperativeHandle(n,(function(){return{open:a}}),[a]),o.default.createElement(t.Fragment,null,r(u(u({},c),{},{open:a})))}));ae.displayName=\"Dropzone\";var ue={disabled:!1,getFilesFromEvent:function(e){return v(this,void 0,void 0,(function(){return g(this,(function(t){return w(e)&&w(e.dataTransfer)?[2,F(e.dataTransfer,e.type)]:function(e){return w(e)&&w(e.target)}(e)?[2,D(e)]:Array.isArray(e)&&e.every((function(e){return\"getFile\"in e&&\"function\"==typeof e.getFile}))?[2,x(e)]:[2,[]]}))}))},maxSize:1/0,minSize:0,multiple:!0,maxFiles:0,preventDropOnDocument:!0,noClick:!1,noKeyboard:!1,noDrag:!1,noDragEventsBubbling:!1,validator:null,useFsAccessApi:!0};ae.defaultProps=ue,ae.propTypes={children:i.default.func,accept:i.default.oneOfType([i.default.string,i.default.arrayOf(i.default.string)]),multiple:i.default.bool,preventDropOnDocument:i.default.bool,noClick:i.default.bool,noKeyboard:i.default.bool,noDrag:i.default.bool,noDragEventsBubbling:i.default.bool,minSize:i.default.number,maxSize:i.default.number,maxFiles:i.default.number,disabled:i.default.bool,getFilesFromEvent:i.default.func,onFileDialogCancel:i.default.func,onFileDialogOpen:i.default.func,useFsAccessApi:i.default.bool,onDragEnter:i.default.func,onDragLeave:i.default.func,onDragOver:i.default.func,onDrop:i.default.func,onDropAccepted:i.default.func,onDropRejected:i.default.func,validator:i.default.func};var ce={isFocused:!1,isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],fileRejections:[]};function le(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=u(u({},ue),e),r=n.accept,o=n.disabled,i=n.getFilesFromEvent,a=n.maxSize,p=n.minSize,d=n.multiple,v=n.maxFiles,g=n.onDragEnter,m=n.onDragLeave,y=n.onDragOver,b=n.onDrop,h=n.onDropAccepted,w=n.onDropRejected,D=n.onFileDialogCancel,x=n.onFileDialogOpen,F=n.useFsAccessApi,O=n.preventDropOnDocument,j=n.noClick,A=n.noKeyboard,k=n.noDrag,E=n.noDragEventsBubbling,P=n.validator,C=t.useMemo((function(){return\"function\"==typeof x?x:se}),[x]),S=t.useMemo((function(){return\"function\"==typeof D?D:se}),[D]),z=t.useRef(null),R=t.useRef(null),T=t.useReducer(fe,ce),L=f(T,2),I=L[0],M=L[1],K=I.isFocused,B=I.isFileDialogActive,$=I.draggedFiles,Y=t.useRef(\"undefined\"!=typeof window&&window.isSecureContext&&F&&X()),J=function(){!Y.current&&B&&setTimeout((function(){R.current&&(R.current.files.length||(M({type:\"closeDialog\"}),S()))}),300)};t.useEffect((function(){return window.addEventListener(\"focus\",J,!1),function(){window.removeEventListener(\"focus\",J,!1)}}),[R,B,S,Y]);var ne=t.useRef([]),re=function(e){z.current&&z.current.contains(e.target)||(e.preventDefault(),ne.current=[])};t.useEffect((function(){return O&&(document.addEventListener(\"dragover\",H,!1),document.addEventListener(\"drop\",re,!1)),function(){O&&(document.removeEventListener(\"dragover\",H),document.removeEventListener(\"drop\",re))}}),[z,O]);var ae=t.useCallback((function(e){e.preventDefault(),e.persist(),Fe(e),ne.current=[].concat(s(ne.current),[e.target]),W(e)&&Promise.resolve(i(e)).then((function(t){U(e)&&!E||(M({draggedFiles:t,isDragActive:!0,type:\"setDraggedFiles\"}),g&&g(e))}))}),[i,g,E]),le=t.useCallback((function(e){e.preventDefault(),e.persist(),Fe(e);var t=W(e);if(t&&e.dataTransfer)try{e.dataTransfer.dropEffect=\"copy\"}catch(e){}return t&&y&&y(e),!1}),[y,E]),pe=t.useCallback((function(e){e.preventDefault(),e.persist(),Fe(e);var t=ne.current.filter((function(e){return z.current&&z.current.contains(e)})),n=t.indexOf(e.target);-1!==n&&t.splice(n,1),ne.current=t,t.length>0||(M({isDragActive:!1,type:\"setDraggedFiles\",draggedFiles:[]}),W(e)&&m&&m(e))}),[z,m,E]),de=t.useCallback((function(e,t){var n=[],o=[];e.forEach((function(e){var t=f(q(e,r),2),i=t[0],u=t[1],c=f(G(e,p,a),2),l=c[0],s=c[1],d=P?P(e):null;if(i&&l&&!d)n.push(e);else{var v=[u,s];d&&(v=v.concat(d)),o.push({file:e,errors:v.filter((function(e){return e}))})}})),(!d&&n.length>1||d&&v>=1&&n.length>v)&&(n.forEach((function(e){o.push({file:e,errors:[_]})})),n.splice(0)),M({acceptedFiles:n,fileRejections:o,type:\"setFiles\"}),b&&b(n,o,t),o.length>0&&w&&w(o,t),n.length>0&&h&&h(n,t)}),[M,d,r,p,a,v,b,h,w,P]),ve=t.useCallback((function(e){e.preventDefault(),e.persist(),Fe(e),ne.current=[],W(e)&&Promise.resolve(i(e)).then((function(t){U(e)&&!E||de(t,e)})),M({type:\"reset\"})}),[i,de,E]),ge=t.useCallback((function(){if(Y.current){M({type:\"openDialog\"}),C();var e={multiple:d,types:Z(r)};window.showOpenFilePicker(e).then((function(e){return i(e)})).then((function(e){de(e,null),M({type:\"closeDialog\"})})).catch((function(e){ee(e)?(S(e),M({type:\"closeDialog\"})):te(e)&&(Y.current=!1,R.current&&(R.current.value=null,R.current.click()))}))}else R.current&&(M({type:\"openDialog\"}),C(),R.current.value=null,R.current.click())}),[M,C,S,F,de,r,d]),me=t.useCallback((function(e){z.current&&z.current.isEqualNode(e.target)&&(\" \"!==e.key&&\"Enter\"!==e.key&&32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),ge()))}),[z,ge]),ye=t.useCallback((function(){M({type:\"focus\"})}),[]),be=t.useCallback((function(){M({type:\"blur\"})}),[]),he=t.useCallback((function(){j||(Q()?setTimeout(ge,0):ge())}),[j,ge]),we=function(e){return o?null:e},De=function(e){return A?null:we(e)},xe=function(e){return k?null:we(e)},Fe=function(e){E&&e.stopPropagation()},Oe=t.useMemo((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?\"ref\":t,r=e.role,i=e.onKeyDown,a=e.onFocus,f=e.onBlur,s=e.onClick,p=e.onDragEnter,d=e.onDragOver,v=e.onDragLeave,g=e.onDrop,m=l(e,oe);return u(u(c({onKeyDown:De(V(i,me)),onFocus:De(V(a,ye)),onBlur:De(V(f,be)),onClick:we(V(s,he)),onDragEnter:xe(V(p,ae)),onDragOver:xe(V(d,le)),onDragLeave:xe(V(v,pe)),onDrop:xe(V(g,ve)),role:\"string\"==typeof r&&\"\"!==r?r:\"button\"},n,z),o||A?{}:{tabIndex:0}),m)}}),[z,me,ye,be,he,ae,le,pe,ve,A,k,o]),je=t.useCallback((function(e){e.stopPropagation()}),[]),Ae=t.useMemo((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?\"ref\":t,o=e.onChange,i=e.onClick,a=l(e,ie),f=c({accept:r,multiple:d,type:\"file\",style:{display:\"none\"},onChange:we(V(o,ve)),onClick:we(V(i,je)),tabIndex:-1},n,R);return u(u({},f),a)}}),[R,r,d,ve,o]),ke=$.length,Ee=ke>0&&N({files:$,accept:r,minSize:p,maxSize:a,multiple:d,maxFiles:v}),Pe=ke>0&&!Ee;return u(u({},I),{},{isDragAccept:Ee,isDragReject:Pe,isFocused:K&&!o,getRootProps:Oe,getInputProps:Ae,rootRef:z,inputRef:R,open:we(ge)})}function fe(e,t){switch(t.type){case\"focus\":return u(u({},e),{},{isFocused:!0});case\"blur\":return u(u({},e),{},{isFocused:!1});case\"openDialog\":return u(u({},ce),{},{isFileDialogActive:!0});case\"closeDialog\":return u(u({},e),{},{isFileDialogActive:!1});case\"setDraggedFiles\":var n=t.isDragActive,r=t.draggedFiles;return u(u({},e),{},{draggedFiles:r,isDragActive:n});case\"setFiles\":return u(u({},e),{},{acceptedFiles:t.acceptedFiles,fileRejections:t.fileRejections});case\"reset\":return u({},ce);default:return e}}function se(){}e.ErrorCode=I,e.default=ae,e.useDropzone=le,Object.defineProperty(e,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-dropzone/dist/index.js\n");

/***/ })

};
;